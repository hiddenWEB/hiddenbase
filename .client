<?php

          #########################################################################
          ###########################################################################
          ############################################################################
    #########                                                                  ########
      ########       ##    ##  ##  ####    ####    ######  ##      ##         ##########
       ########      ##    ##  ##  ##  ##  ##  ##  ##      ####    ##        ############
        ########     ## ## ##  ##  ##  ##  ##  ##  ####    ##  ##  ##       ##############
          #######    ##    ##  ##  ##  ##  ##  ##  ##      ##    ####      ################
          ########   ##    ##  ##  ####    ####    ######  ##      ##     ##################
        ###########                                                      ###################
       #############                    Adnane Ar                       ###################
      ###############             mrxjokercard@gmail.com               ###################
     #################           https://www.fb.com/tc5.13            ###################
    ###################                                              ###################
          #############################################################################
          ############################################################################
          ###########################################################################



  if(!defined('HIDDEN_PATH')){
    echo "Please define the constant <\ HIDDEN_PATH \> to start use the plugin !";
  }else{

    class HIDDEN{
      static private $looping = [
        "bot"     => 0
      ];

      static private $auth = [
        "user"     => "root",
        "password" => ""
      ];

      static public function connect($user, $pass=false){
        if($user === HIDDEN::$auth['user'] && $pass == HIDDEN::$auth['password']){
          return "Connected to Hidden ($user; $pass).";
        }
      }

      static public function getdata(){
        return HIDDEN::$auth;
      }

      static public function securedPath(){
        return HIDDEN_PATH;
      }

      static public function create_table($name){

        if(HIDDEN::is_table($name)){
          return "Error, database already exists !";
        }else{
          file_put_contents(HIDDEN::securedPath()."/storage/.$name", '{}');
          return "$name has been created.";
        }
      }

      static public function delete_table($name){
        unlink(HIDDEN::securedPath()."/storage/.$name");
        return "$name has been removed";
      }

      static public function is_table($name){
        if(file_exists(HIDDEN::securedPath()."/storage/.$name")){
          return true;
        }
      }

      static public function insert($data, $into){
        if(is_array($data)){
          if(HIDDEN::is_table($into)){

            $file = HIDDEN::securedPath()."/storage/.$into";

            $currentData = json_decode(@file_get_contents($file), true);

            //$currentData['AUTO_INCERMENT'] = $currentData['AUTO_INCERMENT'] + 1;
            array_push($currentData, $data);

            if(file_put_contents($file, json_encode($currentData))){
              return count($currentData) - 1;
            }

          }
        }
      }

      static public function update($index, $newArray, $from){
        if(HIDDEN::is_table($from)){
          $data = HIDDEN::fetch_once($from, $index);

          if(is_array($newArray)){

            $checkKeys = array_keys($newArray);
            $maxKeys = count($checkKeys);

            $counter=-1;
            while($counter < $maxKeys - 1){
              $counter++;
              $data[$checkKeys[$counter]]=$newArray[$checkKeys[$counter]];
            }

            $fullData = HIDDEN::fetch($from);
            $fullData[$index]=$data;
            unset($fullData[$index]["index"]);

            $file = HIDDEN::securedPath()."/storage/.$from";
            if(file_put_contents($file, json_encode($fullData))){
              return "$from has been updated !";
            }

          }

        }
      }

      static public function delete($index, $from){
        if(HIDDEN::is_table($from)){

          $file = HIDDEN::securedPath()."/storage/.$from";

          $currentData = json_decode(@file_get_contents($file), true);

          //$currentData['AUTO_INCERMENT'] = $currentData['AUTO_INCERMENT'] + 1;
          $currentData[$index]=false;

          if(file_put_contents($file, json_encode($currentData))){
            return "$index has been deleted !";
          }

        }
      }

      static public function fetch($name){

        if(HIDDEN::is_table($name)){
          $data = @file_get_contents(HIDDEN::securedPath()."/storage/.$name");
          $data = json_decode($data, true);

          return $data;
        }

      }

      static public function num_rows($name){
        if(HIDDEN::is_table($name)){
          $data = HIDDEN::fetch($name);
          return count($data);
        }
      }

      static public function fetch_once($name, $index=0){

        if(HIDDEN::is_table($name)){
          $data = HIDDEN::fetch($name);
          $data[$index]["index"]=$index;

          return $data[$index];
        }

      }

      static public function find_by($index, $value, $where){
        $data = HIDDEN::fetch($where);

        $counter=-1;
        $found=false;
        while ($counter < HIDDEN::num_rows($where)-1) {
          $counter++;
          if($test = HIDDEN::fetch_once($where, $counter)){
            if($test[$index]==$value){
              $found=$test;
            }
          }
        }

        return $found;
      }


      static public function fetch_until_last($name){

        if(HIDDEN::is_table($name)){
          $data = HIDDEN::fetch($name);

          $maxKeys = count($data);
          $key=-1;

          $return=[];
          while($key<$maxKeys-1){
            $key++;
            $data[$key]["index"]=$key;

            $subArray = $data[$key];

            $_maxKeys=count($subArray);
            $_key=-1;
            while ($_key<$_maxKeys-1) {
              $_key++;

              $subKeys = array_keys($subArray);

              $return[$subKeys[$_key]]=$subArray[$subKeys[$_key]];
            }

          }

          return $return;
        }

      }


    }
    $authentification = new HIDDEN;

  }

?>
